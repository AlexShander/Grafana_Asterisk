version: "3.9"
services:

  asterisk:
    image: alexshander/asterisk:18.3-alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    entrypoint: ["/usr/sbin/asterisk", "-fvvv"]
    volumes:
      - asterisk-spool:/var/spool/asterisk
      - asterisk-configure:/etc/asterisk
      - asterisk-sounds:/var/lib/asterisk/sounds
      - letsencrypt:/etc/letsencrypt
      - well-known:/usr/share/nginx/html
    networks:
      - swarm-asterisk
      - db-backend

  asterisk-db:
    image: postgres:13.3-alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=asterisk
    ports:
      - 5432:5432
    volumes:
      - asterisk-db-data:/var/lib/postgresql/data
      - $PWD/../sql/asteriskcdrdb.sql:/docker-entrypoint-initdb.d/asteriskcdrdb.sql
    networks:
      - db-backend

  asterisk-grafana:
    image: grafana/grafana:7.5.6
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    environment:
      - GF_SERVER_ROOT_URL=https://mydent.openspeak.kz/grafana
      - GF_SERVER_DOMAIN=mydent.openspeak.kz
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - db-backend

  asterisk-nginx:
    image: nginx:1.20.0-alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    volumes:
      - $PWD/../nginx/app.conf:/etc/nginx/conf.d/app.conf
      - asterisk-spool:/var/spool/asterisk
      - letsencrypt:/etc/letsencrypt
      - well-known:/usr/share/nginx/html
      - $PWD/../nginx/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf
      - $PWD/../nginx/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem
    ports:
      - 80:80
      - 443:443
    networks:
      - db-backend

  asterisk_redis:
    image: redis:alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ident_redis:/data
    networks:
      db-backend:

  ami_collector:
    image: alexshander/ami_current_call:1.0-alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    environment:
      - AMI_ADDRESS=asterisk
      - AMI_USER=userevents
      - AMI_PASSWORD=password
      - REDIS_HOST=asterisk_redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      db-backend:

  ident_flask_cdr:
    image: alexshander/ident_asterisk:1.0-alpine
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    environment:
      - IDENT_INTEGRATION_KEY=${IDENT_INTEGRATION_KEY}
      - DB_USER=asterisk
      - DB_PASSWORD=password
      - REDIS_HOST=asterisk_redis
      - DB_ADDRESS=asterisk-db
      - DOMAIN="https://$HOSTNAME/monitor/"
      - DIR_RECORD='/var/spool/asterisk/monitor/'
      - IS_FIRST_SYNC=0
      - TYPE_DB='pgsql'
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      db-backend:


networks:
  swarm-asterisk:
    external: true
    driver: macvlan
  db-backend:
    external: false
    driver: overlay

volumes:
  asterisk-configure:
  asterisk-db-data:
  asterisk-spool:
  asterisk-sounds:
  grafana-data:
  ident_redis:
  letsencrypt:
    external: true
  well-known:
    external: true
  share-nginx:
    external: true
